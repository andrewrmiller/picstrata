#!/bin/bash

usage() {
	echo
	echo "pst - Build and container management utility for Picstrata."
	echo
	echo "Usage:"
	echo
	echo "   pst <command>"
	echo 
	echo "Available commands:"
	echo
	echo "   build              Builds the Picstrata containers."
	echo "   start              Starts the Picstrata containers."
    echo "   stop               Stops the Picstrata containers"
	echo "   ls                 Lists the Picstrata containers"
	echo "   logs [container]   Shows the logs for a given container"
	echo "   push               Push the docker images to the repository"
	echo
	echo "Where [container] is one of 'api', 'wrk1', 'wrk2', or 'wq'"
	echo
	echo "The following environment variables must be set:"
	echo
	echo "   PST_DATABASE_HOST"
	echo "   PST_DATABASE_USER"
	echo "   PST_QUEUE_TYPE"
	echo "   PST_TIMEZONE_DB_API_KEY"
	echo "   PST_API_KEY_1"
	echo
}

CONTAINER_PREFIX=picstrata
API_CONTAINER=$CONTAINER_PREFIX-api
WORKERS_CONTAINER=$CONTAINER_PREFIX-workers
QUEUE_CONTAINER=$CONTAINER_PREFIX-queue

VERSION=0.8.7

buildContainers () {
	cd pkg
	docker build --rm -f beanstalkd.Dockerfile -t picstrata/beanstalkd:$VERSION -t picstrata/beanstalkd:latest .
	npm run build
	retVal=$?
	if [ $retVal -ne 0 ]; then
		echo "npm build error occurred."
		exit $retVal
	fi
	docker build --rm -f api.Dockerfile -t picstrata/api:$VERSION -t picstrata/api:latest .
	docker build --rm -f workers.Dockerfile -t picstrata/workers:$VERSION -t picstrata/workers:latest .
	cd ../db 
	docker build --rm -f db.Dockerfile -t picstrata/db:$VERSION -t picstrata/db:latest .
	docker rmi $(docker images --filter "dangling=true" -q --no-trunc)
	cd ..
}

startServices() {
	echo Starting Picstrata containers...
	cd pkg
	HOST_IP=`hostname -I | awk '{print $1}'`
	export PST_DATABASE_HOST=$HOST_IP
	export PST_DATABASE_PASSWORD=$(my_print_defaults -s pstuser | grep password | cut -d "=" -f 2)
	docker-compose --compatibility up -d
  echo Containers started.
}

stopServices() {
  echo Stopping Picstrata containers...
	cd pkg
	HOST_IP=`hostname -I | awk '{print $1}'`
	export PST_DATABASE_HOST=$HOST_IP
	docker-compose --compatibility down
  echo Containers stopped.
}

listServices () {
  echo Storage Layer Containers
  echo ----------------------------------
  docker ps | grep -E "CONTAINER ID|$CONTAINER_PREFIX"
}

viewContainerLogs() {
	case "$1" in
	"api")
		docker logs $API_CONTAINER 2>&1
		;;
	"wrk1")
		docker logs $WORKERS_CONTAINER-1 2>&1
		;;
	"wrk2")
		docker logs $WORKERS_CONTAINER-2 2>&1
		;;
	"wq")
		docker logs $QUEUE_CONTAINER 2>&1
		;;
	*)
		usage
		;;
	esac;
}

pushImages() {
	docker push picstrata/api:$VERSION
	docker push picstrata/api:latest
	docker push picstrata/db:$VERSION
	docker push picstrata/db:latest
	docker push picstrata/workers:$VERSION
	docker push picstrata/workers:latest
}

# Change to the root of the project
pushd "$( dirname "$0" )"/.. > /dev/null

case "$1" in 
build)
	buildContainers
	;;
start)
	startServices
	;;
stop)
	stopServices
	;;
ls)
  listServices
  ;;
logs)
	viewContainerLogs $2
	;; 
push)
	pushImages $2
	;; 
*)
	usage
	;;
esac

popd > /dev/null